# Live Transit Pipeline Architecture

This document describes the architecture of the live transit pipeline system.

## Architecture Diagram

```mermaid
graph TD
%% Services
svcazurecontainerapps_ingestionservice["`Name: ingestion-service
Path: services/ingestion
Language: java
Port: 8080
DockerFile: Dockerfile
Docker Context: ./`"]
svcazurecontainerapps_apiservice["`Name: api-service
Path: services/api
Language: java
Port: 8080
DockerFile: Dockerfile
Docker Context: ./`"]
svcazurecontainerapps_etlworker["`Name: etl-worker
Path: services/etl-worker
Language: python
Port: 8080
DockerFile: Dockerfile
Docker Context: ./`"]
subgraph "Compute Resources"
%% Resources
subgraph containerappenv["Azure Container Apps (ACA) Environment"]
azurecontainerapps_ingestionservice("`ingestion-service (Azure Container App)`")
azurecontainerapps_apiservice("`api-service (Azure Container App)`")
azurecontainerapps_etlworker("`etl-worker (Azure Container App)`")
end
containerappenv:::cluster
end
subgraph "Dependency Resources"
%% Dependency Resources
azuredatabaseforpostgresql_postgresdb["`postgres-db (Azure Database for PostgreSQL)`"]
azurecacheforredis_rediscache["`redis-cache (Azure Cache for Redis)`"]
end
%% Relationships
svcazurecontainerapps_ingestionservice --> |"hosted on"| azurecontainerapps_ingestionservice
azurecontainerapps_ingestionservice -.-> |"secret"| azuredatabaseforpostgresql_postgresdb
svcazurecontainerapps_apiservice --> |"hosted on"| azurecontainerapps_apiservice
svcazurecontainerapps_etlworker --> |"hosted on"| azurecontainerapps_etlworker
azurecontainerapps_etlworker -.-> |"secret"| azurecacheforredis_rediscache
```

## Data Flow

1. **Ingestion Service**:
   - Simulates and ingests real-time transit data
   - Stores data in PostgreSQL database
   - Runs as a containerized service in Azure Container Apps

2. **API Service**:
   - Provides REST endpoints for accessing transit data
   - Reads data from PostgreSQL database
   - Runs as a containerized service in Azure Container Apps

3. **ETL Worker**:
   - Processes and transforms transit data
   - Uses Redis for caching intermediate results
   - Connects to PostgreSQL for data storage
   - Runs as a containerized Python service in Azure Container Apps

4. **Shared Infrastructure**:
   - Azure Database for PostgreSQL: Primary data storage
   - Azure Cache for Redis: Caching layer for ETL operations